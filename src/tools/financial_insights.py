from pydantic import BaseModel, Field
from langchain_core.tools import tool
from langchain_core.messages import SystemMessage, HumanMessage
from psycopg.rows import dict_row
import json
import textwrap
from dependencies import get_llm, get_db_pool
from logger import log

SCHEMA_HINT = textwrap.dedent("""\
    ### Tables
    transactions(id, statement_id, transaction_date, transaction_details, amount, category)
    
    statements(id, account_holder, account_name, start_date, end_date, opening_balance, closing_balance, credit_limit, interest_charged)
""")

class SQLSpec(BaseModel):
    """LLM must output *only* valid SQL in the `sql` field."""
    sql: str = Field(
        description="A single SELECT statement that answers the user question."
    )

@tool
async def get_financial_insights(question: str) -> dict:
    """
    Provides financial insights by querying the database.

    Question examples:
      - "How much did I spend on groceries last month?"
      - "Show my total credit-card payments in April 2025."
      - "List the five biggest transactions this year."
    
    Args:
        question: User's question about their financial data.

    Returns:
        str: A narrative answer to the question, generated by the LLM.
        dict:
            {
                "response": A narrative answer to the question, generated by the LLM,
                "fatal_err": False
            }
            or
            {
                "fatal_err": True
            } on failure. 
    """

    try:
        pool = get_db_pool()
        plain_llm = get_llm()
        structured_llm = get_llm().with_structured_output(SQLSpec)
        
        sys_msgs = [SystemMessage(content=f"""
            Use the provided database schema to answer user questions.
            Return ONLY JSON exactly matching the schema.
            Use the database schema below.
            {SCHEMA_HINT}
        """)]

        user_msgs = [HumanMessage(content=question)]
        sql_spec = await structured_llm.ainvoke(sys_msgs + user_msgs)

        log.info(f"[financial_insights] generated SQL: {sql_spec}")

        async with pool.connection() as conn:
            async with conn.cursor(row_factory=dict_row) as cur:
                await cur.execute(sql_spec.sql) # type: ignore[arg-type]
                rows = await cur.fetchall()

                sys_msgs = [SystemMessage(content="""
                        Explain the query results clearly and concisely.
                        Answer should be in plain English.
                    """)]
                user_msgs = [HumanMessage(content=f"""
                        Question: {question}
                        Result rows (JSON):
                        {json.dumps(rows, default=str)[:10_000]}
                    """)]
                
                reply = await plain_llm.ainvoke(sys_msgs + user_msgs)

                log.info(f"[financial_insights] LLM reply: {reply.content}")

                return {
                    "response": reply.content,
                    "fatal_err": False  
                }
                
    
    except Exception as e:
        log.error(f"[financial_insights] Failed to get insights: {e}")
        return {
            "fatal_err": True, 
            "err_details": str(e)
        }